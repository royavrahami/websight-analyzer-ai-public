name: CI Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Install Playwright browsers
      run: |
        playwright install
        
    - name: Run tests
      run: |
        pytest tests/ -v --cov=core --cov-report=xml
        
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        
    - name: Run linting
      run: |
        flake8 core/ gui/ scripts/ --max-line-length=100
        black --check core/ gui/ scripts/
        isort --check-only core/ gui/ scripts/
        
  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Test GUI startup
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')
        from gui.web_analyzer_gui import WebAnalyzerGUI
        print('GUI import successful')
        "
        
    - name: Test core modules
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')
        from core.integrated_web_analyzer import *
        print('Core modules import successful')
        "
        
    - name: Test scripts
      run: |
        python scripts/working_crawler.py --help
        echo 'Scripts test successful' 